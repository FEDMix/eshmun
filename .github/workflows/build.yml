name: Build Eshmun

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest - MSVC"
            os: windows-latest
            makefiles: '"MinGW Makefiles"'
            qt_path: 'D:\a\eshmun\Qt\5.15.2\msvc2019_64'
            cc: "cl"
            cxx: "cl"

          - name: "Ubuntu Latest - Clang"
            os: ubuntu-latest
            makefiles: '"Unix Makefiles"'
            qt_path: "/usr/lib/qt5"
            cc: "clang"
            cxx: "clang++-11"

          - name: "MacOS Latest - Clang"
            os: macos-latest
            makefiles: '"Unix Makefiles"'
            qt_path: "/usr/local/opt/qt@5/"
            cc: "clang"
            cxx: "clang++"

    steps:
      - name: All - Checkout project
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Windows - Set ENV
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Linux - Install Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq cmake build-essential gcc-multilib
          sudo apt-get install -y -qq mesa-common-dev mesa-utils freeglut3-dev \
                                  libavcodec-dev libavformat-dev libavutil-dev libboost-dev \
                                  libdouble-conversion-dev libeigen3-dev libexpat1-dev libfontconfig-dev \
                                  libfreetype6-dev libgdal-dev libglew-dev libhdf5-dev libjpeg-dev libjsoncpp-dev \
                                  liblz4-dev liblzma-dev libnetcdf-dev libnetcdf-cxx-legacy-dev libogg-dev \
                                  libpng-dev libpython3-dev libqt5opengl5-dev libqt5x11extras5-dev libsqlite3-dev \
                                  libswscale-dev libtheora-dev libtiff-dev libxml2-dev libxt-dev qtbase5-dev \
                                  qttools5-dev zlib1g-dev
        shell: bash

      - name: Windows - Install LLVM and Clang
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.1.0"
          force-version: true
          directory: ${{ runner.temp }}/llvm

      - name: Linux - Install LLVM and Clang
        if: runner.os == 'Linux'
        run: |
          # sudo update-alternatives --remove-all llvm
          # sudo update-alternatives --remove-all clang

          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 11

          sudo apt-get -y -qq install clang-format-11
          sudo apt-get -y -qq install clang-tidy-11

          # curl https://gist.githubusercontent.com/junkdog/70231d6953592cd6f27def59fe19e50d/raw/92f0e73d2558402b7316021c1ab408b30e534de6/update-alternatives-clang.sh > update-alternatives-clang.sh
          # chmod u+x update-alternatives-clang.sh
          # sudo ./update-alternatives-clang.sh 11 1
        shell: bash

      - name: Windows - Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v2

      - name: Linux and Windows - Install vtk
        if: (runner.os == 'Linux' || runner.os == 'Windows')
        run: |
          git clone --recursive https://gitlab.kitware.com/vtk/vtk.git
          cd vtk
          git checkout v9.0.1
          mkdir build
          cd build
          cmake -G${{ matrix.config.makefiles }} \
                -DCMAKE_INSTALL_PREFIX=$HOME/vtk-inst \
                -DCMAKE_INSTALL_RPATH=$HOME/vtk-inst \
                -DVTK_GROUP_ENABLE_Qt=YES \
                -DVTK_GROUP_ENABLE_Imaging=YES \
                -DVTK_GROUP_ENABLE_Views=YES \
                -DVTK_GROUP_ENABLE_Rendering=YES \
                -DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
                -DVTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=YES \
                -DVTK_MODULE_ENABLE_VTK_RenderingOpenGL2=YES \
                -DBUILD_TESTING=OFF \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
                ..
          make -j $(($(nproc) - 1))
          make install
        shell: bash

      - name: MacOS - Install vtk
        if: runner.os == 'macOS'
        run: brew install vtk
        shell: bash

      - name: All - Compiler version check
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ${{ matrix.config.cxx }}
          else
            ${{ matrix.config.cxx }} --version
          fi
        shell: bash

      - name: All - Cmake version check
        run: cmake --version
        shell: bash

      - name: All - CMake Configure
        run: |
          mkdir build
          cd build
          cmake -G${{ matrix.config.makefiles }} \
            -DCMAKE_PREFIX_PATH="$HOME/vtk-inst;${{ matrix.config.qt_path }}" \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            ..
        shell: bash

      - name: All - Make
        run: |
          cd build
          make
        shell: bash

      - name: All - Test
        run: |
          cd build
          make test
        shell: bash
