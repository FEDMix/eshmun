name: Build Eshmun

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest - MSVC"
            os: windows-latest
            # makefiles: '"MinGW Makefiles"'
            makefiles: 'Ninja'
            build_command: 'ninja'
            vtk_path: '/vtk/'
            qt_path: 'D:\a\eshmun\Qt\5.15.2\msvc2019_64'
            cc: "cl"
            cxx: "cl"
            extra_cmake_flags: -D CMAKE_C_COMPILER_LAUNCHER=ccache.exe -D CMAKE_CXX_COMPILER_LAUNCHER=ccache.exe

          - name: "Ubuntu Latest - Clang"
            os: ubuntu-latest
            makefiles: 'Unix Makefiles'
            build_command: 'make'
            vtk_path: /vtk/
            qt_path: "/usr/lib/qt5"
            cc: "clang-11"
            cxx: "clang++-11"
            extra_cmake_flags: -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

          - name: "MacOS Latest - Clang"
            os: macos-latest
            makefiles: 'Unix Makefiles'
            build_command: 'make'
            qt_path: "/usr/local/opt/qt@5/"
            cc: "clang"
            cxx: "clang++"

    steps:
      - name: All - Checkout project
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Windows - Set ENV
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Linux - Install Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq cmake build-essential gcc-multilib
          sudo apt-get install -y -qq mesa-common-dev mesa-utils freeglut3-dev \
                                  libavcodec-dev libavformat-dev libavutil-dev libboost-dev \
                                  libdouble-conversion-dev libeigen3-dev libexpat1-dev libfontconfig-dev \
                                  libfreetype6-dev libgdal-dev libglew-dev libhdf5-dev libjpeg-dev libjsoncpp-dev \
                                  liblz4-dev liblzma-dev libnetcdf-dev libnetcdf-cxx-legacy-dev libogg-dev \
                                  libpng-dev libpython3-dev libqt5opengl5-dev libqt5x11extras5-dev libsqlite3-dev \
                                  libswscale-dev libtheora-dev libtiff-dev libxml2-dev libxt-dev qtbase5-dev \
                                  qttools5-dev zlib1g-dev
        shell: bash

      - name: Windows - Install LLVM and Clang
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.1.0"
          force-version: true
          directory: ${{ runner.temp }}/llvm

      - name: Linux - Install LLVM and Clang
        if: runner.os == 'Linux'
        run: |
          # sudo update-alternatives --remove-all llvm
          # sudo update-alternatives --remove-all clang

          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 11

          sudo apt-get -y -qq install clang-format-11
          sudo apt-get -y -qq install clang-tidy-11

          # curl https://gist.githubusercontent.com/junkdog/70231d6953592cd6f27def59fe19e50d/raw/92f0e73d2558402b7316021c1ab408b30e534de6/update-alternatives-clang.sh > update-alternatives-clang.sh
          # chmod u+x update-alternatives-clang.sh
          # sudo ./update-alternatives-clang.sh 11 1
        shell: bash

      - name: All - Compiler version check
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ${{ matrix.config.cxx }}
          else
            ${{ matrix.config.cxx }} --version
          fi
        shell: bash

      - name: All - Cmake version check
        run: cmake --version
        shell: bash

      - name: Windows - Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v2

      - name: Windows - Download ccache
        if: runner.os == 'Windows'
        id: ccache
        working-directory: ${{ github.workspace }}
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v4.2.1/Windows.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      - name: Windows - Check ccache
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          ./ccache.exe --version
          echo $GITHUB_WORKSPACE >> $GITHUB_PATH
        shell: bash

      - name: Windows - Prepare ccache timestamp
        if: runner.os == 'Windows'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Windows - ccache cache files
        if: runner.os == 'Windows'
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-

      - name: Linux - ccache
        if: (runner.os == 'Linux')
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.config.name }}

      - name: Windows - download hdf5
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          git clone --recursive https://github.com/HDFGroup/hdf5.git
          cd hdf5
          git checkout hdf5-1_12_0

      - name: Windows - configure and build hdf5
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}/hdf5
        run: |
          cmake \
          -B build \
          -S . \
          $EXTRA_FLAGS \
          -G "$BUILD_SYSTEM"
          cd build
          ninja
          ninja install
        env:
          BUILD_SYSTEM: ${{ matrix.config.makefiles }}
          EXTRA_FLAGS: ${{ matrix.config.extra_cmake_flags }}


      - name: Linux and Windows - Download vtk
        if: (runner.os == 'Linux' || runner.os == 'Windows')
        run: |
          git clone --recursive https://gitlab.kitware.com/vtk/vtk.git
          cd vtk
          git checkout v9.0.1

      - name: configure with cmake
        if: (runner.os == 'Linux' || runner.os == 'Windows')
        run: |
          cmake -E env CXXFLAGS="-w" \
          cmake \
          -B build \
          -S $SOURCE \
          -G "$BUILD_SYSTEM" \
          $EXTRA_FLAGS \
          -D CMAKE_BUILD_TYPE=Release \
          -D VTK_GROUP_ENABLE_Qt=YES \
          -D VTK_GROUP_ENABLE_Imaging=YES \
          -D VTK_GROUP_ENABLE_Views=YES \
          -D VTK_GROUP_ENABLE_Rendering=YES \
          -D VTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
          -D VTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=YES \
          -D VTK_MODULE_ENABLE_VTK_RenderingOpenGL2=YES \
          -D VTK_MODULE_USE_EXTERNAL_VTK_tiff=YES \
          -D VTK_MODULE_USE_EXTERNAL_VTK_hdf5=YES \
          -D BUILD_TESTING=OFF
        working-directory: '${{ github.workspace }}${{ matrix.config.vtk_path }}'
        env:
          SOURCE: ${{ github.workspace }}${{ matrix.config.vtk_path }}
          BUILD_SYSTEM: ${{ matrix.config.makefiles }}
          EXTRA_FLAGS: ${{ matrix.config.extra_cmake_flags }}
        shell: bash

      - name: Windows - build vtk
        if: runner.os == 'Windows'
        run: |
          ninja
        working-directory: '${{ github.workspace }}${{ matrix.config.vtk_path }}build'
        shell: bash

      - name: Linux - build vtk
        if: runner.os == 'Linux'
        run: |
          make -j $(nproc)
        working-directory: '${{ github.workspace }}${{ matrix.config.vtk_path }}build'

        shell: bash

      - name: Linux - Install vtk
        if: runner.os == 'Linux'
        run: |
          cd vtk/build
          sudo make install
        shell: bash

      - name: Windows - Install and Set PATH
        if: runner.os == 'Windows'
        run: |
          ninja install
          echo "C:/Program Files (x86)/VTK/lib/" >> $GITHUB_PATH
          echo "C:/Program Files (x86)/VTK/bin/" >> $GITHUB_PATH
          echo "D:\a\eshmun\Qt\5.15.2\mingw81_64\lib" >> $GITHUB_PATH
          echo "D:\a\eshmun\Qt\5.15.2\mingw81_64\bin" >> $GITHUB_PATH
        shell: bash
        working-directory: '${{ github.workspace }}${{ matrix.config.vtk_path }}build'

      - name: Linux - ldconfig
        if: runner.os == 'Linux'
        run: |
          sudo ldconfig -v
        shell: bash

      - name: MacOS - Install vtk
        if: runner.os == 'macOS'
        run: brew install vtk
        shell: bash

      - name: All - CMake Configure
        run: |
          mkdir build
          cd build
          cmake -G "$BUILD_SYSTEM" \
            $FLAGS \
            -DCMAKE_PREFIX_PATH="$HOME/vtk-inst;${{ matrix.config.qt_path }}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            ..
        env:
          BUILD_SYSTEM: ${{ matrix.config.makefiles }}
          FLAGS: ${{ matrix.config.cmake_flags }}
        shell: bash


      - name: Windows - Make
        if: runner.os == 'Windows'
        run: |
          ninja
        shell: bash
        working-directory: '${{ github.workspace }}/build'

      - name: MacOS & Linux - Make
        if: (runner.os == 'macOS' || runner.os == 'Linux')
        run: |
          make
        shell: bash
        working-directory: '${{ github.workspace }}/build'

      - name: All - Headless Test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            make test ARGS="-VV"
          working-directory: build

      # - name: All - Test
      #   run: |
      #     cd build
      #     make test ARGS="-VV"
      #   shell: bash

      - name: Upload Test Image
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: 'screen-dump-${{ matrix.config.os }}'
          path: ${{ github.workspace }}/build/test/test_dummy.png
