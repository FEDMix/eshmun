name: Build Eshmun

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest - MSVC"
            os: windows-latest
            cc: "clang"
            cxx: "clang++"

          - name: "Ubuntu Latest - Clang"
            os: ubuntu-latest
            cc: "clang"
            cxx: "clang++-11"

          - name: "MacOS Latest - Clang"
            os: macos-latest
            cc: "clang"
            cxx: "clang++"

    steps:
      - name: All - Checkout project
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: All - Install ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Windows - Set ENV
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Linux - Install Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq cmake build-essential gcc-multilib
          sudo apt-get install -y -qq mesa-common-dev mesa-utils freeglut3-dev ninja-build \
                                  libavcodec-dev libavformat-dev libavutil-dev libboost-dev \
                                  libdouble-conversion-dev libeigen3-dev libexpat1-dev libfontconfig-dev \
                                  libfreetype6-dev libgdal-dev libglew-dev libhdf5-dev libjpeg-dev libjsoncpp-dev \
                                  liblz4-dev liblzma-dev libnetcdf-dev libnetcdf-cxx-legacy-dev libogg-dev \
                                  libpng-dev libpython3-dev libqt5opengl5-dev libqt5x11extras5-dev libsqlite3-dev \
                                  libswscale-dev libtheora-dev libtiff-dev libxml2-dev libxt-dev qtbase5-dev \
                                  qttools5-dev zlib1g-dev
        shell: bash

      - name: Windows - Install LLVM and Clang
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.1.0"
          force-version: true
          directory: ${{ runner.temp }}/llvm

      - name: Linux - Install LLVM and Clang
        if: runner.os == 'Linux'
        run: |
          # sudo update-alternatives --remove-all llvm
          # sudo update-alternatives --remove-all clang

          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 11

          sudo apt-get -y -qq install clang-format-11
          sudo apt-get -y -qq install clang-tidy-11

          # curl https://gist.githubusercontent.com/junkdog/70231d6953592cd6f27def59fe19e50d/raw/92f0e73d2558402b7316021c1ab408b30e534de6/update-alternatives-clang.sh > update-alternatives-clang.sh
          # chmod u+x update-alternatives-clang.sh
          # sudo ./update-alternatives-clang.sh 11 1
        shell: bash

      # - name: MacOS - Install LLVM, Clang, and CMake
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install llvm@11
      #     brew install cmake
      #     xcode-select --install

      - name: Windows - Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v2

      # - name: MacOS - Install Qt
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install qt@5.15.2
      #     brew link --force qt@5
      #     sudo ln -s /usr/local/Cellar/qt@5/5.15.2/mkspecs /usr/local/mkspecs
      #     sudo ln -s /usr/local/Cellar/qt@5/5.15.2/plugins /usr/local/plugins

      # - name: Linux and Windows - Cache vtk
      #   if: runner.os == 'Windows' || runner.os == 'Linux'
      #   id: cache-vtk
      #   uses: actions/cache@v2
      #   with:
      #     path: $HOME/vtk-inst
      #     key: ${{ runner.os }}-vtk

      - name: Linux and Windows - Install vtk
        if: (runner.os == 'Windows' || runner.os == 'Linux')
        # if: (runner.os == 'Windows' || runner.os == 'Linux') && steps.cache-vtk.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://gitlab.kitware.com/vtk/vtk.git
          cd vtk
          git checkout v9.0.1
          mkdir build
          cd build
          cmake -GNinja \
                -DCMAKE_INSTALL_PREFIX=$HOME/vtk-inst \
                -DCMAKE_INSTALL_RPATH=$HOME/vtk-inst \
                -DVTK_Group_Qt=ON \
                -DVTK_QT_VERSION=5 \
                -DVTK_Group_Imaging=ON \
                -DVTK_Group_Views=ON \
                -DVTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=YES \
                -DModule_vtkRenderingFreeTypeFontConfig=ON \
                -DBUILD_TESTING=OFF \
                -DVTK_USE_SYSTEM_LIBRARIES=ON \
                -DVTK_USE_SYSTEM_LIBPROJ4=OFF \
                -DVTK_USE_SYSTEM_GL2PS=OFF \
                -DVTK_USE_SYSTEM_LIBHARU=OFF \
                -DVTK_USE_SYSTEM_PUGIXML=OFF \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
                ..
          ninja -j$(($(nproc) - 1))
          ninja install
        shell: bash

      - name: MacOS - Install vtk
        if: runner.os == 'macOS'
        run: brew install vtk
        shell: bash

      - name: All - Compiler version check
        run: ${{ matrix.config.cxx }} --version
        shell: bash

      - name: All - Cmake version check
        run: cmake --version
        shell: bash

      - name: All - CMake Configure
        run: |
          mkdir build
          cd build
          cmake -GNinja \
            -DCMAKE_PREFIX_PATH=$HOME/vtk-inst \
            -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \ 
            ..
        shell: bash

      - name: All - Make
        run: |
          cd build
          ninja
        shell: bash

      - name: All - Test
        run: |
          cd build
          ninja test
        shell: bash
